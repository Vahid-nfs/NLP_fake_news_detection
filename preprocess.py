import numpy as np import pandas as pdimport networkx as nximport jsonfrom glob import globfrom collections import OrderedDictfrom torch.utils.data import DataLoader,Datasetimport torchimport torch.nn.functional as Ffrom torch import nnfrom sklearn.model_selection import  train_test_splitfrom transformers import BertTokenizer, BertModelfrom sklearn.metrics import  confusion_matrix ,accuracy_scoreimport datetimefrom transformers import AutoTokenizerfrom tqdm import tqdmfrom  datetime import datetimeimport networkx as nximport osstart_date=pd.to_datetime("2018-01-01")end_date=pd.to_datetime("2020-01-01")os.makedirs("./similarity_outputs/poolar",exist_ok=True)os.makedirs("./similarity_outputs/last_hidden_state",exist_ok=True)save_part_value=100df=pd.read_json("politifact_factcheck_data.json", lines=True)df=df.drop(columns=["factchecker","factcheck_date","factcheck_analysis_link"])df.statement_date=pd.to_datetime(df.statement_date)df=df[start_date <= df.statement_date][df.statement_date < end_date]df=df.sort_values("statement_date" , ignore_index=True)df["id"]=df.indextokenizer = AutoTokenizer.from_pretrained("bert-base-cased")bert=BertModel.from_pretrained("bert-base-uncased")tokenize=tokenizer(list(df["statement"].values), return_tensors='pt', padding=True, truncation=True)["input_ids"]last_hidden_state=[]pooler_output=[]for i in tqdm(range(len(tokenize[:]))):    outputs=bert(tokenize[i:i+1])    last_hidden_state.append(outputs["last_hidden_state"])    pooler_output.append(outputs["pooler_output"])    last_iter=False    if (i+1) % save_part_value==0:        number=int((i) / save_part_value)        last_hidden_state=torch.vstack(last_hidden_state)        pooler_output=torch.vstack(pooler_output)                torch.save(last_hidden_state,"./similarity_outputs/last_hidden_state/last_hidden_state{:03d}.pt".format(number))        torch.save(pooler_output,"./similarity_outputs/poolar/pooler_output{:03d}pt".format(number))        last_hidden_state=[]        pooler_output=[]        last_iter=Trueif not last_iter:    number=int((i) / save_part_value)    last_hidden_state=torch.vstack(last_hidden_state)    pooler_output=torch.vstack(pooler_output)        torch.save(last_hidden_state,"./similarity_outputs/last_hidden_state/last_hidden_state{:03d}.pt".format(number))    torch.save(pooler_output,"./similarity_outputs/poolar/pooler_output{:03d}pt".format(number))